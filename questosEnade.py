import streamlit as st
import os
import requests
import textwrap
import json
from datetime import datetime
from bs4 import BeautifulSoup
from openai import OpenAI
import PyPDF2
from io import BytesIO

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="Gerador de Quest√µes ENADE",
    page_icon="üéì",
    layout="wide"
)

# --- ESTADO DA SESS√ÉO ---
for key in ("texto_fonte", "trecho_para_prompt", "questao_bruta", "questao"):
    if key not in st.session_state:
        st.session_state[key] = "" if key != "questao" else None
if "last_pdf" not in st.session_state:
    st.session_state.last_pdf = None
if "fonte_info" not in st.session_state:
    st.session_state.fonte_info = {"link": ""}

# --- DICION√ÅRIO DE √ÅREAS ---
AREAS_ENADE = {
    "Ci√™ncias Sociais Aplicadas": [
        "Administra√ß√£o", "Arquitetura e Urbanismo", "Biblioteconomia",
        "Ci√™ncias Cont√°beis", "Ci√™ncias Econ√¥micas", "Comunica√ß√£o Social",
        "Direito", "Design", "Gest√£o de Pol√≠ticas P√∫blicas", "Jornalismo",
        "Publicidade e Propaganda", "Rela√ß√µes Internacionais", "Servi√ßo Social",
        "Turismo"
    ],
    "Engenharias": [
        "Engenharia Aeron√°utica", "Engenharia Agr√≠cola", "Engenharia Ambiental",
        "Engenharia Biom√©dica", "Engenharia Cartogr√°fica", "Engenharia Civil",
        "Engenharia de Alimentos", "Engenharia de Computa√ß√£o",
        "Engenharia de Controle e Automa√ß√£o", "Engenharia de Materiais",
        "Engenharia de Minas", "Engenharia de Petr√≥leo", "Engenharia de Produ√ß√£o",
        "Engenharia de Software", "Engenharia El√©trica", "Engenharia Eletr√¥nica",
        "Engenharia Florestal", "Engenharia Mec√¢nica", "Engenharia Mecatr√¥nica",
        "Engenharia Metal√∫rgica", "Engenharia Naval", "Engenharia Qu√≠mica",
        "Engenharia T√™xtil"
    ],
    "Ci√™ncias da Sa√∫de": [
        "Educa√ß√£o F√≠sica", "Enfermagem", "Farm√°cia", "Fisioterapia",
        "Fonoaudiologia", "Medicina", "Medicina Veterin√°ria", "Nutri√ß√£o",
        "Odontologia", "Sa√∫de Coletiva"
    ],
}

# --- CHECKLIST E FORMATO DE SA√çDA ---
SYSTEM_PROMPT = """
Voc√™ √© um docente especialista no ENADE (INEP). Siga rigorosamente este checklist:
1. Defina um "contexto" (situa√ß√£o-problema) breve e relevante.
2. Apresente um "texto_base" referenciado (Autor/Ve√≠culo, Ano, Link/Arquivo).
3. Elabore um "enunciado" afirmativo, claro e objetivo.
4. Gere exatamente 5 "alternativas" (A‚ÄìE), apenas 1 correta.
5. Distratores plaus√≠veis, baseados em erros comuns.
6. Use linguagem formal, impessoal, norma-padr√£o.
7. Avalie uma compet√™ncia (aplica√ß√£o de conhecimento), n√£o memoriza√ß√£o.
8. Evite termos absolutos (‚Äúsempre‚Äù, ‚Äúnunca‚Äù, ‚Äúsomente‚Äù, etc.).
9. Indique "gabarito" no formato: "Letra X".
10. Inclua "justificativas" breves para cada alternativa.

**Formato de sa√≠da** (retorne apenas este JSON):
{
  "contexto": "...",
  "texto_base": "...",
  "referencia": "...",
  "enunciado": "...",
  "alternativas": {
    "A": "...",
    "B": "...",
    "C": "...",
    "D": "...",
    "E": "..."
  },
  "gabarito": "Letra X",
  "justificativas": {
    "A": "...",
    "B": "...",
    "C": "...",
    "D": "...",
    "E": "..."
  }
}
"""

# --- EXTRA√á√ÉO DE TEXTO ---
@st.cache_data(ttl=3600)
def extrair_texto_url(url: str) -> str | None:
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        for tag in soup(["script", "style", "header", "footer", "nav", "aside"]):
            tag.decompose()
        return " ".join(soup.stripped_strings)
    except Exception as e:
        st.error(f"Falha ao extrair URL: {e}")
        return None

@st.cache_data
def extrair_texto_pdf(upload) -> str | None:
    try:
        reader = PyPDF2.PdfReader(BytesIO(upload.read()))
        text = "".join(page.extract_text() or "" for page in reader.pages)
        return text
    except Exception as e:
        st.error(f"Falha ao ler PDF: {e}")
        return None

# --- GERA√á√ÉO PELO OPENAI ---
def gerar_questao_llm(prompt: str, api_key: str, modelo: str) -> str:
    client = OpenAI(api_key=api_key)
    resp = client.chat.completions.create(
        model=modelo,
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user",   "content": prompt}
        ],
        temperature=0.3,
        max_tokens=1500
    )
    return resp.choices[0].message.content

# --- SIDEBAR: CONFIGURA√á√ÉO DA API ---
with st.sidebar:
    st.markdown(
        "## üîë Configura√ß√£o da API\n"
        "- **OpenAI**: platform.openai.com/account/api-keys"
    )
    api_key = st.text_input("Chave da OpenAI", type="password")
    modelo = st.selectbox("Modelo", ["gpt-4o-mini", "gpt-3.5-turbo"])
    if not api_key:
        st.warning("Insira sua chave de API para continuar.")
        st.stop()

# --- ETAPA 1: ESCOPO ---
st.header("1. Defini√ß√£o do Escopo")
area    = st.selectbox("Grande √Årea", list(AREAS_ENADE.keys()))
curso   = st.selectbox("Curso", AREAS_ENADE[area])
assunto = st.text_input("T√≥pico/Assunto central")

# --- ETAPA 2: TEXTO-BASE ---
st.header("2. Texto-Base")
metodo = st.radio("Fonte do texto-base:", ["URL", "PDF"])
if metodo == "URL":
    url = st.text_input("Cole a URL:")
    if st.button("Extrair texto da URL"):
        txt = extrair_texto_url(url)
        if txt:
            st.session_state.texto_fonte = txt
            st.session_state.fonte_info["link"] = url
elif metodo == "PDF":
    up = st.file_uploader("Envie o PDF", type=["pdf"])
    if up and up != st.session_state.last_pdf:
        txt = extrair_texto_pdf(up)
        if txt:
            st.session_state.texto_fonte = txt
            st.session_state.fonte_info["link"] = up.name
            st.session_state.last_pdf = up

if st.session_state.texto_fonte:
    st.success("Texto-base carregado!")
    with st.expander("Ver texto extra√≠do"):
        st.text_area("Texto-Fonte", st.session_state.texto_fonte, height=300)
    # sele√ß√£o de par√°grafos
    pars = [p for p in st.session_state.texto_fonte.split("\n") if len(p.strip()) > 100]
    sel = st.multiselect(
        "Selecione par√°grafos para Texto-Base",
        options=pars,
        format_func=lambda x: textwrap.shorten(x, 100, placeholder="...")
    )
    st.session_state.trecho_para_prompt = "\n\n".join(sel) if sel else st.session_state.texto_fonte

# --- ETAPA 3: CONTEXTO E PAR√ÇMETROS ---
if st.session_state.trecho_para_prompt:
    st.header("3. Contexto e Par√¢metros ENADE")
    contexto = st.text_area("Contexto (situa√ß√£o-problema)", "")
    with st.form("enade_form"):
        fonte      = st.text_input("Fonte/Ve√≠culo", "")
        ano        = st.text_input("Ano", "")
        tipo_item  = st.selectbox("Tipo de item", ["M√∫ltipla Escolha", "Asser√ß√£o-Raz√£o", "Discursivo"])
        perfil     = st.text_input("Perfil do egresso", "")
        competencia= st.text_input("Compet√™ncia", "")
        objeto     = st.text_input("Objeto de conhecimento", "")
        dificuldade= st.select_slider("Dificuldade", ["F√°cil", "M√©dia", "Dif√≠cil"])
        info_add   = st.text_area("Observa√ß√µes (opcional)", "")
        submit     = st.form_submit_button("üöÄ Gerar Quest√£o")
    if submit:
        if not (fonte and ano and contexto):
            st.error("Preencha Fonte, Ano e Contexto.")
        else:
            # refer√™ncia ABNT simplificado
            hoje = datetime.now()
            meses = ["jan.", "fev.", "mar.", "abr.", "mai.", "jun.",
                     "jul.", "ago.", "set.", "out.", "nov.", "dez."]
            data_acesso = f"{hoje.day} {meses[hoje.month-1]} {hoje.year}"
            referencia = (
                f"Fonte: {fonte}, {ano}. Dispon√≠vel em: "
                f"{st.session_state.fonte_info['link']}. Acesso em: {data_acesso}."
            )
            # montar prompt
            prompt = f"""
**Contexto (situa√ß√£o-problema):**
{contexto}

**Texto-Base:**
{st.session_state.trecho_para_prompt}

**Refer√™ncia:**
{referencia}

**Encomenda ENADE:**
- Curso: {curso}
- Assunto: {assunto}
- Tipo de item: {tipo_item}
- Perfil do egresso: {perfil}
- Compet√™ncia: {competencia}
- Objeto de conhecimento: {objeto}
- Dificuldade: {dificuldade}
- Observa√ß√µes: {info_add}
"""
            raw = gerar_questao_llm(prompt, api_key, modelo)
            st.session_state.questao_bruta = raw
            # valida√ß√£o JSON
            try:
                q = json.loads(raw)
                campos = {"contexto","texto_base","referencia","enunciado","alternativas","gabarito","justificativas"}
                faltando = campos - set(q.keys())
                if faltando:
                    st.error(f"Faltam campos na resposta: {faltando}")
                else:
                    st.session_state.questao = q
            except Exception as e:
                st.error(f"Resposta n√£o √© JSON v√°lido: {e}")

# --- ETAPA 4: EXIBI√á√ÉO ---
if st.session_state.questao:
    st.header("4. Quest√£o ENADE Estruturada")
    q = st.session_state.questao
    st.markdown(f"**Contexto:** {q['contexto']}")
    st.markdown(f"**Texto-Base:** {q['texto_base']}")
    st.markdown(f"**Refer√™ncia:** {q['referencia']}")
    st.markdown(f"**Enunciado:** {q['enunciado']}")
    st.markdown("**Alternativas:**")
    for letra, texto in q["alternativas"].items():
        st.markdown(f"- **{letra}**: {texto}")
    st.markdown(f"**Gabarito:** {q['gabarito']}")
    st.markdown("**Justificativas:**")
    for letra, jus in q["justificativas"].items():
        st.markdown(f"- **{letra}**: {jus}")
    st.download_button(
        "üì• Baixar (.txt)",
        data=json.dumps(q, ensure_ascii=False, indent=2),
        file_name=f"questao_{curso.replace(' ','_')}.json",
        mime="application/json"
    )
else:
    st.info("Complete todas as etapas para gerar a quest√£o.")
