import streamlit as st
import os
import requests
import textwrap
import json
from datetime import datetime
from bs4 import BeautifulSoup
from openai import OpenAI
import PyPDF2
from io import BytesIO

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="Gerador de Quest√µes ENADE",
    page_icon="üéì",
    layout="wide"
)

# --- ESTADO DA SESS√ÉO ---
for key in ("texto_fonte", "trecho_para_prompt", "contexto",
            "questao_bruta", "questao", "last_pdf"):
    if key not in st.session_state:
        st.session_state[key] = "" if key not in ("questao", "last_pdf") else None
if "fonte_info" not in st.session_state:
    st.session_state.fonte_info = {"link": ""}

# --- DICION√ÅRIO DE √ÅREAS ---
AREAS_ENADE = {
    "Ci√™ncias Sociais Aplicadas": [
        "Administra√ß√£o", "Arquitetura e Urbanismo", "Biblioteconomia",
        "Ci√™ncias Cont√°beis", "Ci√™ncias Econ√¥micas", "Comunica√ß√£o Social",
        "Direito", "Design", "Gest√£o de Pol√≠ticas P√∫blicas", "Jornalismo",
        "Publicidade e Propaganda", "Rela√ß√µes Internacionais", "Servi√ßo Social",
        "Turismo"
    ],
    "Engenharias": [
        "Engenharia Aeron√°utica", "Engenharia Agr√≠cola", "Engenharia Ambiental",
        "Engenharia Biom√©dica", "Engenharia Cartogr√°fica", "Engenharia Civil",
        "Engenharia de Alimentos", "Engenharia de Computa√ß√£o",
        "Engenharia de Controle e Automa√ß√£o", "Engenharia de Materiais",
        "Engenharia de Minas", "Engenharia de Petr√≥leo", "Engenharia de Produ√ß√£o",
        "Engenharia de Software", "Engenharia El√©trica", "Engenharia Eletr√¥nica",
        "Engenharia Florestal", "Engenharia Mec√¢nica", "Engenharia Mecatr√¥nica",
        "Engenharia Metal√∫rgica", "Engenharia Naval", "Engenharia Qu√≠mica",
        "Engenharia T√™xtil"
    ],
    "Ci√™ncias da Sa√∫de": [
        "Educa√ß√£o F√≠sica", "Enfermagem", "Farm√°cia", "Fisioterapia",
        "Fonoaudiologia", "Medicina", "Medicina Veterin√°ria", "Nutri√ß√£o",
        "Odontologia", "Sa√∫de Coletiva"
    ],
}

# --- EXTRACÃßAÃÉO DE TEXTO ---
@st.cache_data(ttl=3600)
def extrair_texto_url(url: str) -> str | None:
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        for tag in soup(["script", "style", "header", "footer", "nav", "aside"]):
            tag.decompose()
        return " ".join(soup.stripped_strings)
    except Exception as e:
        st.error(f"Erro ao extrair URL: {e}")
        return None

@st.cache_data
def extrair_texto_pdf(upload) -> str | None:
    try:
        reader = PyPDF2.PdfReader(BytesIO(upload.read()))
        return "".join(page.extract_text() or "" for page in reader.pages)
    except Exception as e:
        st.error(f"Erro ao ler PDF: {e}")
        return None

# --- RESUMO DO TEXTO-BASE ---
def gerar_resumo_llm(texto: str, api_key: str, modelo: str) -> str:
    prompt = f"""
Resuma em at√© 3 frases este texto, mantendo foco nos conceitos fundamentais, 
para servir de base a uma situa√ß√£o‚Äêproblema ENADE:

\"\"\"{texto}\"\"\"
"""
    client = OpenAI(api_key=api_key)
    resp = client.chat.completions.create(
        model=modelo,
        messages=[
            {"role": "system", "content": "Voc√™ √© um assistente que cria resumos concisos para quest√µes ENADE."},
            {"role": "user",   "content": prompt}
        ],
        temperature=0.5,
        max_tokens=200
    )
    return resp.choices[0].message.content.strip()

# --- GERA√á√ÉO DO CONTEXTO ---
def gerar_contexto_llm(texto_base: str, api_key: str, modelo: str) -> str:
    prompt = f"""
Com base neste trecho de texto-base, gere UMA BREVE situa√ß√£o-problema (contexto) 
profissional e relevante para uma quest√£o ENADE. Retorne apenas o texto do contexto.

\"\"\"{texto_base}\"\"\"
"""
    client = OpenAI(api_key=api_key)
    resp = client.chat.completions.create(
        model=modelo,
        messages=[
            {"role": "system", "content": "Voc√™ √© um assistente que elabora contextos para quest√µes ENADE."},
            {"role": "user",   "content": prompt}
        ],
        temperature=0.7,
        max_tokens=300
    )
    return resp.choices[0].message.content.strip()

# --- PROMPT E GERA√á√ÉO DA QUEST√ÉO ---
SYSTEM_PROMPT = """
Voc√™ √© um docente especialista no ENADE (INEP). Siga este checklist:
1. Use o contexto fornecido.
2. Apresente um texto-base referenciado (Autor/Ve√≠culo, Ano, Link/Arquivo).
3. Elabore um enunciado afirmativo, claro e objetivo.
4. Gere exatamente 5 alternativas (A‚ÄìE), s√≥ 1 correta.
5. Distratores plaus√≠veis, baseados em erros comuns.
6. Use linguagem formal, impessoal, norma-padr√£o.
7. Avalie aplica√ß√£o de conhecimento (compet√™ncia), n√£o memoriza√ß√£o.
8. Evite termos absolutos (‚Äúsempre‚Äù, ‚Äúnunca‚Äù, etc.).
9. Indique gabarito no formato: "Gabarito: Letra X".
10. Inclua justificativas breves para cada alternativa.

Formato de sa√≠da (JSON):
{
  "contexto": "...",
  "texto_base": "...",
  "referencia": "...",
  "enunciado": "...",
  "alternativas": { "A":"", "B":"", "C":"", "D":"", "E":"" },
  "gabarito": "Letra X",
  "justificativas": { "A":"", "B":"", "C":"", "D":"", "E":"" }
}
"""

def gerar_questao_llm(prompt: str, api_key: str, modelo: str) -> str:
    client = OpenAI(api_key=api_key)
    resp = client.chat.completions.create(
        model=modelo,
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user",   "content": prompt}
        ],
        temperature=0.3,
        max_tokens=1500
    )
    return resp.choices[0].message.content

# --- SIDEBAR: API KEY E MODELO ---
with st.sidebar:
    st.markdown("## üîë Configura√ß√£o da API\n- **OpenAI**: platform.openai.com/account/api-keys")
    api_key = st.text_input("Chave da OpenAI", type="password")
    modelo  = st.selectbox("Modelo", ["gpt-4o-mini", "gpt-3.5-turbo"])
    if not api_key:
        st.warning("Insira sua chave de API para continuar.")
        st.stop()

# --- ETAPA 1: ESCOPO ---
st.header("1. Defini√ß√£o do Escopo")
area    = st.selectbox("Grande √Årea", list(AREAS_ENADE.keys()))
curso   = st.selectbox("Curso", AREAS_ENADE[area])
assunto = st.text_input("T√≥pico/Assunto central")

# --- ETAPA 2: TEXTO-BASE E TRECHO-BASE ---
st.header("2. Texto-Base e Trecho-Base")
col1, col2 = st.columns(2)
with col1:
    url = st.text_input("URL do artigo:", value=st.session_state.fonte_info["link"])
    if st.button("Extrair texto da URL"):
        txt = extrair_texto_url(url)
        if txt:
            st.session_state.texto_fonte = txt
            st.session_state.fonte_info["link"] = url
with col2:
    up = st.file_uploader("Ou envie um PDF", type=["pdf"])
    if up and up != st.session_state.last_pdf:
        txt = extrair_texto_pdf(up)
        if txt:
            st.session_state.texto_fonte = txt
            st.session_state.fonte_info["link"] = up.name
            st.session_state.last_pdf = up

if st.session_state.texto_fonte:
    st.success("Texto-base carregado!")
    with st.expander("Ver texto completo"):
        st.text_area("Texto-Fonte", st.session_state.texto_fonte, height=300)

    metodo_tb = st.radio(
        "Como obter o trecho-base?",
        ["Selecionar manualmente", "Gerar resumo autom√°tico com IA"]
    )
    if metodo_tb == "Selecionar manualmente":
        pars = [p.strip() for p in st.session_state.texto_fonte.split("\n") if len(p.strip()) > 80]
        sel = st.multiselect(
            "Selecione par√°grafos",
            options=pars,
            format_func=lambda p: textwrap.shorten(p, 120, placeholder="‚Ä¶")
        )
        if sel:
            st.session_state.trecho_para_prompt = "\n\n".join(sel)
    else:
        if st.button("‚ñ∂Ô∏è Gerar Resumo do Documento"):
            resumo = gerar_resumo_llm(st.session_state.texto_fonte, api_key, modelo)
            st.session_state.trecho_para_prompt = resumo
        if st.session_state.trecho_para_prompt:
            st.markdown("**Resumo gerado (edite se quiser):**")
            st.session_state.trecho_para_prompt = st.text_area(
                "Resumo para trecho-base",
                value=st.session_state.trecho_para_prompt,
                height=120
            )

# --- ETAPA 3: GERA√á√ÉO E EDI√á√ÉO DO CONTEXTO ---
if st.session_state.trecho_para_prompt and not st.session_state.contexto:
    with st.spinner("Gerando contexto..."):
        st.session_state.contexto = gerar_contexto_llm(
            st.session_state.trecho_para_prompt, api_key, modelo
        )

if st.session_state.contexto:
    st.header("3. Contexto (situa√ß√£o-problema)")
    st.session_state.contexto = st.text_area(
        "Edite o contexto conforme desejar:",
        value=st.session_state.contexto,
        height=120
    )

# --- ETAPA 4: PAR√ÇMETROS E GERA√á√ÉO DA QUEST√ÉO ---
if st.session_state.contexto:
    st.header("4. Par√¢metros ENADE e Gera√ß√£o")
    with st.form("enade_form"):
        autor      = st.text_input("Autor (SOBRENOME, Nome)")
        titulo     = st.text_input("T√≠tulo do texto-base")
        fonte      = st.text_input("Ve√≠culo (revista, jornal, site etc.)")
        data_pub   = st.text_input("Data de publica√ß√£o (dia m√™s abreviado. ano)")
        tipo_item  = st.selectbox("Tipo de item", ["M√∫ltipla Escolha", "Asser√ß√£o-Raz√£o", "Discursivo"])
        perfil     = st.text_input("Perfil do egresso")
        competencia= st.text_input("Compet√™ncia a ser avaliada")
        objeto     = st.text_input("Objeto de conhecimento")
        dificuldade= st.select_slider("N√≠vel de dificuldade", ["F√°cil", "M√©dia", "Dif√≠cil"])
        extra      = st.text_area("Observa√ß√µes (opcional)")
        gerar_btn  = st.form_submit_button("üöÄ Gerar Quest√£o")
    if gerar_btn:
        if not (autor and titulo and fonte and data_pub):
            st.error("Preencha Autor, T√≠tulo, Ve√≠culo e Data de publica√ß√£o.")
        else:
            hoje = datetime.now()
            meses_abnt = ["jan.", "fev.", "mar.", "abr.",
                          "mai.", "jun.", "jul.", "ago.",
                          "set.", "out.", "nov.", "dez."]
            acesso = f"{hoje.day} {meses_abnt[hoje.month-1]} {hoje.year}"
            referencia_abnt = (
                f"{autor}. {titulo}. {fonte}, {data_pub}. "
                f"Dispon√≠vel em: <{st.session_state.fonte_info['link']}>. "
                f"Acesso em: {acesso}."
            )
            prompt = f"""
**Contexto (situa√ß√£o-problema):**
{st.session_state.contexto}

**Texto-Base:**
{st.session_state.trecho_para_prompt}

**Refer√™ncia (ABNT):**
{referencia_abnt}

**Encomenda ENADE:**
- Curso: {curso}
- Assunto: {assunto}
- Tipo de item: {tipo_item}
- Perfil do egresso: {perfil}
- Compet√™ncia: {competencia}
- Objeto de conhecimento: {objeto}
- N√≠vel de dificuldade: {dificuldade}
- Observa√ß√µes: {extra}
"""
            raw = gerar_questao_llm(prompt, api_key, modelo)
            st.session_state.questao_bruta = raw
            try:
                q = json.loads(raw)
                campos = {"contexto", "texto_base", "referencia",
                          "enunciado", "alternativas", "gabarito", "justificativas"}
                faltando = campos - set(q.keys())
                if faltando:
                    st.error(f"Faltam campos na resposta: {faltando}")
                else:
                    st.session_state.questao = q
            except Exception as e:
                st.error(f"Resposta n√£o √© JSON v√°lido: {e}")

# --- ETAPA 5: EXIBI√á√ÉO FINAL ---
if st.session_state.questao:
    st.header("5. Quest√£o ENADE Estruturada")
    q = st.session_state.questao
    st.markdown(f"**Contexto:** {q['contexto']}")
    st.markdown(f"**Texto-Base:** {q['texto_base']}")
    st.markdown(f"**Refer√™ncia:** {q['referencia']}")
    st.markdown(f"**Enunciado:** {q['enunciado']}")
    st.markdown("**Alternativas:**")
    for letra, texto in q["alternativas"].items():
        st.markdown(f"- **{letra}**: {texto}")
    st.markdown(f"**Gabarito:** {q['gabarito']}")
    st.markdown("**Justificativas:**")
    for letra, jus in q["justificativas"].items():
        st.markdown(f"- **{letra}**: {jus}")
    st.download_button(
        "üì• Baixar (.json)",
        data=json.dumps(q, ensure_ascii=False, indent=2),
        file_name=f"questao_{curso.replace(' ', '_')}.json",
        mime="application/json"
    )
else:
    st.info("Siga todos os passos para gerar sua quest√£o ENADE.")
