import streamlit as st
import os
import requests
import textwrap
import pandas as pd
from datetime import datetime
from bs4 import BeautifulSoup
from openai import OpenAI
import google.generativeai as genai
import PyPDF2
from io import BytesIO

# --- CONFIGURA√á√ÉO DA P√ÅGINA E ESTADO DA SESS√ÉO ---

st.set_page_config(
    page_title="Gerador de Quest√µes ENADE",
    page_icon="üéì",
    layout="wide"
)

# Estado da sess√£o
if 'texto_fonte' not in st.session_state:
    st.session_state.texto_fonte = ""
if 'fonte_info' not in st.session_state:
    st.session_state.fonte_info = {"source": "", "year": "", "link": ""}
if 'trecho_para_prompt' not in st.session_state:
    st.session_state.trecho_para_prompt = ""
if 'usar_contextualizacao_ia' not in st.session_state:
    st.session_state.usar_contextualizacao_ia = False
if 'questao_gerada' not in st.session_state:
    st.session_state.questao_gerada = ""

# --- DICION√ÅRIO DE √ÅREAS ---

AREAS_ENADE = {
    "Ci√™ncias Sociais Aplicadas": [
        "Administra√ß√£o", "Arquitetura e Urbanismo", "Biblioteconomia", "Ci√™ncias Cont√°beis",
        "Ci√™ncias Econ√¥micas", "Comunica√ß√£o Social", "Direito", "Design", "Gest√£o de Pol√≠ticas P√∫blicas",
        "Jornalismo", "Publicidade e Propaganda", "Rela√ß√µes Internacionais", "Servi√ßo Social",
        "Turismo"
    ],
    "Engenharias": [
        "Engenharia Aeron√°utica", "Engenharia Agr√≠cola", "Engenharia Ambiental", "Engenharia Biom√©dica",
        "Engenharia Cartogr√°fica", "Engenharia Civil", "Engenharia de Alimentos", "Engenharia de Computa√ß√£o",
        "Engenharia de Controle e Automa√ß√£o", "Engenharia de Materiais", "Engenharia de Minas",
        "Engenharia de Petr√≥leo", "Engenharia de Produ√ß√£o", "Engenharia de Software", "Engenharia El√©trica",
        "Engenharia Eletr√¥nica", "Engenharia Florestal", "Engenharia Mec√¢nica", "Engenharia Mecatr√¥nica",
        "Engenharia Metal√∫rgica", "Engenharia Naval", "Engenharia Qu√≠mica", "Engenharia T√™xtil"
    ],
    "Ci√™ncias da Sa√∫de": [
        "Educa√ß√£o F√≠sica", "Enfermagem", "Farm√°cia", "Fisioterapia", "Fonoaudiologia",
        "Medicina", "Medicina Veterin√°ria", "Nutri√ß√£o", "Odontologia", "Sa√∫de Coletiva"
    ],
}

# --- REQUISITOS OBRIGAT√ìRIOS DO ENADE ---

REQUISITOS_OBRIGATORIOS_ENADE = """
- **Originalidade e Ineditismo**: A quest√£o deve ser totalmente in√©dita.
- **Estrutura do Item**: Deve conter um texto-base (situa√ß√£o-est√≠mulo), um enunciado claro e 5 alternativas (A, B, C, D, E).
- **Texto-Base**: Deve ser indispens√°vel para a resolu√ß√£o da quest√£o, n√£o apenas um pretexto. A fonte completa (Autor/Ve√≠culo, Ano, Link/Nome do Arquivo) √© obrigat√≥ria.
- **Enunciado**: Deve ser uma instru√ß√£o clara, objetiva e formulada de maneira afirmativa. N√£o deve solicitar a "incorreta" ou a "exce√ß√£o".
- **Alternativa Correta (Gabarito)**: Apenas UMA alternativa deve ser inquestionavelmente correta.
- **Distratores**: As quatro alternativas incorretas (distratores) devem ser plaus√≠veis, baseadas em erros comuns ou interpreta√ß√µes equivocadas, mas claramente erradas para quem domina o conte√∫do.
- **Linguagem**: A linguagem deve ser formal, impessoal, precisa e seguir a norma-padr√£o.
- **Foco em Compet√™ncias**: A quest√£o deve avaliar a aplica√ß√£o do conhecimento para resolver uma situa√ß√£o-problema, n√£o a simples memoriza√ß√£o de conceitos.
- **Evitar Termos Problem√°ticos**: Evitar o uso de termos como "sempre", "nunca", "todos", "nenhum", "apenas", "somente" nas alternativas.
"""

# --- FUN√á√ïES AUXILIARES ---

@st.cache_data(ttl=3600)
def extrair_texto_url(url: str) -> str | None:
    """Extrai texto de uma p√°gina web usando requests + BeautifulSoup."""
    try:
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        soup = BeautifulSoup(resp.text, "html.parser")
        for tag in soup(["script", "style", "header", "footer", "nav", "aside"]):
            tag.decompose()
        return " ".join(soup.stripped_strings)
    except Exception as e:
        st.error(f"Falha ao extrair texto da URL: {e}")
        return None

@st.cache_data
def extrair_texto_pdf(arquivo_pdf) -> str | None:
    """Extrai texto de um arquivo PDF carregado."""
    try:
        leitor = PyPDF2.PdfReader(BytesIO(arquivo_pdf.read()))
        texto = ""
        for pagina in leitor.pages:
            texto += pagina.extract_text() or ""
        return texto
    except Exception as e:
        st.error(f"Erro ao ler o arquivo PDF: {e}")
        return None

def gerar_questao_com_llm(prompt: str, provedor: str, api_key: str, modelo: str) -> str | None:
    """Gera a quest√£o chamando a API do modelo de IA escolhido."""
    try:
        if provedor == "ChatGPT (OpenAI)":
            client = OpenAI(api_key=api_key)
            resp = client.chat.completions.create(
                model=modelo,
                messages=[
                    {"role": "system", "content": f"Voc√™ √© um docente especialista do INEP e deve criar uma quest√£o para o ENADE. Siga RIGOROSAMENTE as regras:\n{REQUISITOS_OBRIGATORIOS_ENADE}"},
                    {"role": "user",   "content": prompt}
                ],
                temperature=0.6,
                max_tokens=1500
            )
            return resp.choices[0].message.content

        elif provedor == "Gemini (Google)":
            genai.configure(api_key=api_key)
            gm = genai.GenerativeModel(modelo)
            full_prompt = f"Como docente especialista do INEP, crie uma quest√£o ENADE seguindo estas regras:\n{REQUISITOS_OBRIGATORIOS_ENADE}\n\nEncomenda:\n{prompt}"
            resp = gm.generate_content(full_prompt)
            return resp.text

    except Exception as e:
        st.error(f"Erro ao chamar a API de {provedor}: {e}")
        return None

# --- INTERFACE DO STREAMLIT ---

st.title("üéì Assistente para Elabora√ß√£o de Quest√µes ENADE")
st.markdown("Este app cria quest√µes ENADE seguindo as diretrizes oficiais do INEP em 4 etapas.")

# --- SIDEBAR: CONFIGURA√á√ÉO DE IA ---
with st.sidebar:
    st.markdown(
        "## üîë Configura√ß√£o da IA\n"
        "**Como obter sua chave de API**\n\n"
        "- **OpenAI**: platform.openai.com/account/api-keys\n"
        "- **Google Gemini**: Console Google Cloud ‚Üí Generative AI ‚Üí Chaves de API\n"
    )
    provedor_ia = st.selectbox("Provedor de IA", ["ChatGPT (OpenAI)", "Gemini (Google)"])
    default_key = (
        st.secrets.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY")
        if provedor_ia == "ChatGPT (OpenAI)"
        else st.secrets.get("GOOGLE_API_KEY") or os.getenv("GOOGLE_API_KEY")
    )
    api_key = st.text_input("Chave de API", value=default_key or "", type="password")
    modelo_selecionado = st.selectbox(
        "Modelo",
        ["gpt-4o", "gpt-3.5-turbo"] if provedor_ia.startswith("ChatGPT")
        else ["gemini-1.5-pro-latest", "gemini-1.5-flash-latest"]
    )
    if not api_key:
        st.warning("Insira sua chave de API para continuar.")
        st.stop()

# --- ETAPA 1: ESCOPO ---
st.header("Etapa 1: Defini√ß√£o do Escopo")
col1, col2 = st.columns(2)
with col1:
    area = st.selectbox("Grande √Årea do Conhecimento", list(AREAS_ENADE.keys()))
with col2:
    curso = st.selectbox("Curso", AREAS_ENADE[area])
assunto = st.text_input("Assunto ou t√≥pico central", placeholder="Ex: Estruturas de Controle em algoritmos")

# --- ETAPA 2: TEXTO-BASE ---
st.header("Etapa 2: Texto-Base (Situa√ß√£o-Est√≠mulo)")
tab_url, tab_pdf = st.tabs(["üîó URL", "üìÑ PDF"])

with tab_url:
    url_artigo = st.text_input("URL do artigo/p√°gina:")
    if st.button("Extrair da URL"):
        st.session_state.texto_fonte = extrair_texto_url(url_artigo)
        st.session_state.fonte_info.update({"link": url_artigo})

with tab_pdf:
    pdf_file = st.file_uploader("Fa√ßa upload do PDF", type=["pdf"])
    if pdf_file:
        st.session_state.texto_fonte = extrair_texto_pdf(pdf_file)
        st.session_state.fonte_info.update({"link": pdf_file.name})

# --- ETAPA 3: PREPARA√á√ÉO DA ENCOMENDA ---
st.header("Etapa 3: Prepara√ß√£o da Encomenda")
if st.session_state.texto_fonte:
    st.success("Material de base pronto!")
    with st.expander("Ver texto extra√≠do"):
        st.text_area("Texto-Fonte", st.session_state.texto_fonte, height=300)

    modo = st.radio(
        "Uso do texto-fonte:",
        ["Usar par√°grafos selecionados", "Gerar novo Texto-Base pela IA"],
        key="modo"
    )
    st.session_state.usar_contextualizacao_ia = (modo == "Gerar novo Texto-Base pela IA")

    if not st.session_state.usar_contextualizacao_ia:
        pars = [p for p in st.session_state.texto_fonte.split("\n") if len(p.strip()) > 100]
        selecionados = st.multiselect(
            "Selecione par√°grafos para texto-base",
            options=pars,
            format_func=lambda p: textwrap.shorten(p, 100, placeholder="...")
        )
        if selecionados:
            st.session_state.trecho_para_prompt = "\n\n".join(selecionados)
        else:
            st.warning("Nenhum par√°grafo longo encontrado; usar√° todo o texto.")
            st.session_state.trecho_para_prompt = st.session_state.texto_fonte
    else:
        st.info("A IA criar√° um novo Texto-Base a partir de todo o documento.")
        st.session_state.trecho_para_prompt = st.session_state.texto_fonte

    with st.form("encomenda"):
        fonte = st.text_input("Fonte/Ve√≠culo", placeholder="Ex: G1, Livro X")
        ano = st.text_input("Ano de Publica√ß√£o", placeholder="Ex: 2024")
        tipo_item = st.selectbox("Tipo de item", ["M√∫ltipla Escolha", "Asser√ß√£o-Raz√£o", "Discursivo"])
        perfil = st.text_input("Perfil do egresso", placeholder="Ex: √âtico e reflexivo")
        competencia = st.text_input("Compet√™ncia", placeholder="Ex: Analisar conflitos √©ticos")
        objeto = st.text_input("Objeto de conhecimento", placeholder="Ex: Legisla√ß√£o e √©tica")
        dificuldade = st.select_slider("Dificuldade", ["F√°cil", "M√©dia", "Dif√≠cil"], value="M√©dia")
        info_add = st.text_area("Instru√ß√£o adicional (opcional)")

        if st.form_submit_button("üöÄ Gerar Quest√£o"):
            if not fonte or not ano or not st.session_state.trecho_para_prompt:
                st.error("Preencha Fonte, Ano e selecione o texto-base.")
            else:
                hoje = datetime.now()
                meses = ["jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez."]
                data_acesso = f"{hoje.day} {meses[hoje.month-1]} {hoje.year}"
                fonte_str = (
                    f"Fonte: {fonte}, {ano}. Dispon√≠vel em: "
                    f"<{st.session_state.fonte_info['link']}>. Acesso em: {data_acesso}."
                )

                if st.session_state.usar_contextualizacao_ia:
                    instrucao_tb = (
                        "**1. CRIAR NOVO TEXTO-BASE:**\n"
                        f"{st.session_state.trecho_para_prompt}\n\n"
                        "Em seguida, elabore a quest√£o completa."
                    )
                else:
                    instrucao_tb = (
                        "**1. TEXTO-BASE LITERAL:**\n"
                        f"{st.session_state.trecho_para_prompt}"
                    )

                prompt_final = f"""
**ENCOMENDA ENADE**

{instrucao_tb}

{fonte_str}

**Dados da Encomenda:**
- Curso: {curso}
- Assunto: {assunto}
- Tipo de item: {tipo_item}
- Perfil do egresso: {perfil}
- Compet√™ncia: {competencia}
- Objeto de conhecimento: {objeto}
- Dificuldade: {dificuldade}
- Instru√ß√£o adicional: {info_add}

**Tarefa:** Gere a quest√£o completa com:
1) Texto-base (ABNT simplificado);
2) Enunciado claro;
3) Cinco alternativas (A-E);
4) Gabarito no final: "Gabarito: Letra X".
"""
                st.session_state.questao_gerada = gerar_questao_com_llm(
                    prompt_final, provedor_ia, api_key, modelo_selecionado
                )

# --- ETAPA 4: RESULTADO ---
st.header("Etapa 4: Quest√£o Gerada")
if st.session_state.questao_gerada:
    st.markdown(st.session_state.questao_gerada)
    st.download_button(
        "üì• Baixar como .txt",
        data=st.session_state.questao_gerada,
        file_name=f"questao_{curso.replace(' ', '_')}.txt",
        mime="text/plain"
    )
else:
    st.info("Complete as etapas acima para gerar sua quest√£o ENADE.")
