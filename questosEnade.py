import streamlit as st
import os
import requests
import textwrap
from datetime import datetime
from bs4 import BeautifulSoup
from openai import OpenAI
import google.generativeai as genai
import PyPDF2
from io import BytesIO

# --- CONFIGURA√á√ÉO DA P√ÅGINA E ESTADO DA SESS√ÉO ---
st.set_page_config(
    page_title="Gerador de Quest√µes ENADE",
    page_icon="üéì",
    layout="wide"
)

# Inicializa estados de sess√£o
for key in ("texto_fonte", "trecho_para_prompt", "questao_gerada"):
    if key not in st.session_state:
        st.session_state[key] = ""
if "fonte_info" not in st.session_state:
    st.session_state.fonte_info = {"link": ""}

# --- DICION√ÅRIO DE √ÅREAS ---
AREAS_ENADE = {
    "Ci√™ncias Sociais Aplicadas": [
        "Administra√ß√£o", "Arquitetura e Urbanismo", "Biblioteconomia",
        "Ci√™ncias Cont√°beis", "Ci√™ncias Econ√¥micas", "Comunica√ß√£o Social",
        "Direito", "Design", "Gest√£o de Pol√≠ticas P√∫blicas", "Jornalismo",
        "Publicidade e Propaganda", "Rela√ß√µes Internacionais", "Servi√ßo Social",
        "Turismo"
    ],
    "Engenharias": [
        "Engenharia Aeron√°utica", "Engenharia Agr√≠cola", "Engenharia Ambiental",
        "Engenharia Biom√©dica", "Engenharia Cartogr√°fica", "Engenharia Civil",
        "Engenharia de Alimentos", "Engenharia de Computa√ß√£o",
        "Engenharia de Controle e Automa√ß√£o", "Engenharia de Materiais",
        "Engenharia de Minas", "Engenharia de Petr√≥leo", "Engenharia de Produ√ß√£o",
        "Engenharia de Software", "Engenharia El√©trica", "Engenharia Eletr√¥nica",
        "Engenharia Florestal", "Engenharia Mec√¢nica", "Engenharia Mecatr√¥nica",
        "Engenharia Metal√∫rgica", "Engenharia Naval", "Engenharia Qu√≠mica",
        "Engenharia T√™xtil"
    ],
    "Ci√™ncias da Sa√∫de": [
        "Educa√ß√£o F√≠sica", "Enfermagem", "Farm√°cia", "Fisioterapia",
        "Fonoaudiologia", "Medicina", "Medicina Veterin√°ria", "Nutri√ß√£o",
        "Odontologia", "Sa√∫de Coletiva"
    ],
}

# --- REGRAS OBRIGAT√ìRIAS DO ENADE ---
REQUISITOS_ENADE = """
- Originalidade total (sem reprises de provas antigas).
- Texto-base imprescind√≠vel; referenciar Autor/Ve√≠culo, Ano, Link/Arquivo.
- Enunciado afirmativo, claro e objetivo.
- 5 alternativas (A‚ÄìE), apenas 1 correta.
- Distratores plaus√≠veis, mas incorretos.
- Linguagem formal, impessoal, norma-padr√£o.
- Foco em resolver situa√ß√£o-problema (n√£o memoriza√ß√£o).
- Evitar ‚Äúsempre‚Äù, ‚Äúnunca‚Äù, ‚Äútodos‚Äù, ‚Äúnenhum‚Äù, ‚Äúapenas‚Äù, ‚Äúsomente‚Äù.
"""

# --- FUN√á√ïES AUXILIARES ---
@st.cache_data(ttl=3600)
def extrair_texto_url(url: str) -> str | None:
    try:
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        soup = BeautifulSoup(resp.text, "html.parser")
        for tag in soup(["script", "style", "header", "footer", "nav", "aside"]):
            tag.decompose()
        return " ".join(soup.stripped_strings)
    except Exception as e:
        st.error(f"Falha ao extrair URL: {e}")
        return None

@st.cache_data
def extrair_texto_pdf(upload) -> str | None:
    try:
        reader = PyPDF2.PdfReader(BytesIO(upload.read()))
        text = "".join(page.extract_text() or "" for page in reader.pages)
        return text
    except Exception as e:
        st.error(f"Falha ao ler PDF: {e}")
        return None

def gerar_questao(prompt: str, provedor: str, api_key: str, modelo: str) -> str | None:
    try:
        if provedor == "ChatGPT (OpenAI)":
            client = OpenAI(api_key=api_key)
            r = client.chat.completions.create(
                model=modelo,
                messages=[
                    {"role": "system", "content": f"Voc√™ √© docente especialista ENADE. Siga estas regras:\n{REQUISITOS_ENADE}"},
                    {"role": "user",   "content": prompt}
                ],
                temperature=0.6,
                max_tokens=1500
            )
            return r.choices[0].message.content

        else:  # Gemini
            genai.configure(api_key=api_key)
            gm = genai.GenerativeModel(modelo)
            full = f"Como especialista ENADE, siga estas regras:\n{REQUISITOS_ENADE}\n\n{prompt}"
            resp = gm.generate_content(full)
            return resp.text

    except Exception as e:
        st.error(f"Erro ao chamar API ({provedor}): {e}")
        return None

# --- SIDEBAR: CONFIGURA√á√ÉO DA API ---
with st.sidebar:
    st.markdown(
        "## üîë Configura√ß√£o da API\n"
        "- **OpenAI GPT**: platform.openai.com/account/api-keys\n"
        "- **Google Gemini**: Google Cloud Console ‚Üí Generative AI ‚Üí API Keys\n"
    )
    provedor = st.selectbox("Provedor de IA", ["ChatGPT (OpenAI)", "Gemini (Google)"])
    default = (
        st.secrets.get("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY")
        if provedor.startswith("ChatGPT")
        else st.secrets.get("GOOGLE_API_KEY") or os.getenv("GOOGLE_API_KEY")
    )
    api_key = st.text_input("Chave de API", default or "", type="password")
    modelo = st.selectbox(
        "Modelo",
        ["gpt-4o-mini", "gpt-3.5-turbo"] if provedor.startswith("ChatGPT")
        else ["gemini-1.5-pro-latest", "gemini-1.5-flash-latest"]
    )
    if not api_key:
        st.warning("Insira sua chave de API para continuar.")
        st.stop()

# --- ETAPA 1: ESCOPO ---
st.header("1. Defini√ß√£o do Escopo")
area  = st.selectbox("Grande √Årea", list(AREAS_ENADE.keys()))
curso = st.selectbox("Curso", AREAS_ENADE[area])
assunto = st.text_input("T√≥pico/Assunto central", "")

# --- ETAPA 2: TEXTO-BASE ---
st.header("2. Texto-Base (Situa√ß√£o-Est√≠mulo)")
metodo = st.radio("Fonte do texto-base:", ["Copiar link (URL)", "Fazer upload de PDF"])
if metodo == "Copiar link (URL)":
    url = st.text_input("Cole a URL aqui:")
    if st.button("Extrair da URL"):
        st.session_state.texto_fonte = extrair_texto_url(url)
        st.session_state.fonte_info["link"] = url
        st.experimental_rerun()
else:
    upload_pdf = st.file_uploader("Envie o PDF", type=["pdf"])
    if upload_pdf:
        st.session_state.texto_fonte = extrair_texto_pdf(upload_pdf)
        st.session_state.fonte_info["link"] = upload_pdf.name
        st.experimental_rerun()

if st.session_state.texto_fonte:
    st.success("Texto-base carregado!")
    with st.expander("Ver texto extra√≠do"):
        st.text_area("Texto-Fonte", st.session_state.texto_fonte, height=300)

    modo = st.radio("Uso do texto-base:", ["Selecionar par√°grafos", "Gerar novo pela IA"])
    use_ia = modo == "Gerar novo pela IA"
    st.session_state.usar_contextualizacao_ia = use_ia

    if not use_ia:
        paras = [
            p for p in st.session_state.texto_fonte.split("\n")
            if len(p.strip()) > 100
        ]
        sel = st.multiselect(
            "Selecione par√°grafos para texto-base",
            options=paras,
            format_func=lambda x: textwrap.shorten(x, 100, placeholder="...")
        )
        if sel:
            st.session_state.trecho_para_prompt = "\n\n".join(sel)
        else:
            st.warning("Nenhum par√°grafo longo encontrado; usar√° todo o texto.")
            st.session_state.trecho_para_prompt = st.session_state.texto_fonte
    else:
        st.info("A IA criar√° um novo texto-base a partir do documento inteiro.")
        st.session_state.trecho_para_prompt = st.session_state.texto_fonte

# --- ETAPA 3: PAR√ÇMETROS DA ENCOMENDA ---
st.header("3. Par√¢metros ENADE")
if st.session_state.trecho_para_prompt:
    with st.form("enade_form"):
        fonte   = st.text_input("Fonte/Ve√≠culo", "")
        ano     = st.text_input("Ano de publica√ß√£o", "")
        tipo    = st.selectbox("Tipo de item", ["M√∫ltipla Escolha", "Asser√ß√£o-Raz√£o", "Discursivo"])
        perfil  = st.text_input("Perfil do egresso", "")
        comp    = st.text_input("Compet√™ncia", "")
        obj     = st.text_input("Objeto de conhecimento", "")
        diff    = st.select_slider("Dificuldade", ["F√°cil", "M√©dia", "Dif√≠cil"], value="M√©dia")
        extra   = st.text_area("Observa√ß√µes adicionais (opcional)", "")
        submit = st.form_submit_button("üöÄ Gerar Quest√£o")

        if submit:
            if not (fonte and ano):
                st.error("Por favor, preencha 'Fonte/Ve√≠culo' e 'Ano de publica√ß√£o'.")
            else:
                hoje = datetime.now()
                meses = ["jan.", "fev.", "mar.", "abr.", "mai.", "jun.",
                         "jul.", "ago.", "set.", "out.", "nov.", "dez."]
                acesso = f"{hoje.day} {meses[hoje.month-1]} {hoje.year}"
                ref = (
                    f"Fonte: {fonte}, {ano}. Dispon√≠vel em: "
                    f"{st.session_state.fonte_info['link']}. Acesso em: {acesso}."
                )

                if use_ia:
                    instr = (
                        "**1. CRIAR NOVO TEXTO-BASE:**\n"
                        f"{st.session_state.trecho_para_prompt}\n\n"
                        "Em seguida, elabore a quest√£o completa."
                    )
                else:
                    instr = (
                        "**1. TEXTO-BASE LITERAL:**\n"
                        f"{st.session_state.trecho_para_prompt}"
                    )

                prompt = f"""
**ENCOMENDA ENADE**

{instr}

{ref}

- Curso: {curso}
- Assunto: {assunto}
- Tipo de item: {tipo}
- Perfil do egresso: {perfil}
- Compet√™ncia: {comp}
- Objeto de conhecimento: {obj}
- Dificuldade: {diff}
- Observa√ß√µes: {extra}

**Tarefa:** Gere a quest√£o completa contendo:
1) Texto-base (ABNT simplificado);
2) Enunciado claro e objetivo;
3) Cinco alternativas (A‚ÄìE);
4) Gabarito: "Gabarito: Letra X".
"""
                st.session_state.questao_gerada = gerar_questao(
                    prompt, provedor, api_key, modelo
                )

# --- ETAPA 4: RESULTADO FINAL ---
st.header("4. Quest√£o Gerada")
if st.session_state.questao_gerada:
    st.markdown(st.session_state.questao_gerada)
    st.download_button(
        "üì• Baixar (.txt)",
        data=st.session_state.questao_gerada,
        file_name=f"questao_{curso.replace(' ', '_')}.txt",
        mime="text/plain"
    )
else:
    st.info("Preencha todas as etapas para gerar sua quest√£o ENADE.")
